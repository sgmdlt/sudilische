import asyncio
import gc
import json
import random
import sys
from datetime import datetime

import aiohttp
from bs4 import BeautifulSoup

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
HEADERS = {
    "User-Agent":
    "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) " +
    "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Mobile Safari/537.36"
}
setattr(asyncio.sslproto._SSLProtocolTransport, "_start_tls_compatible", True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
async def send_request(url, task_number, session):
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–º –ø—Ä–æ–∫—Å–∏
    global PROXIES_LIST
    proxy_config = "http://" + PROXIES_LIST[task_number % len(PROXIES_LIST)]


    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await asyncio.sleep(random.uniform(1, 3))

    # –¶–∏–∫–ª –æ—Ç–≤–µ—Ç–∞
    got_resp = False
    verify_cert = True
    retry_counter = 0
    while not got_resp:
        try:

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            async with session.get(url, ssl=verify_cert,
                                   proxy=proxy_config) as resp:
                final_resp = await resp.text()
                if resp.ok or resp.status == 499:
                    got_resp = True
                else:
                    final_resp = "–û–®–ò–ë–ö–ê"
                    got_resp = True

                # –¢—Ä–∏–∂–¥—ã –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
                if "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" in final_resp and retry_counter < 2:
                    retry_counter += 1
                    got_resp = False

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            if "certificate has expired" in str(e):
                verify_cert = False
            elif "Server disconnected" not in str(e):
                print(f"ü§ñ {task_number:>3d} |", end=" ")
                if "TimeoutError" in type(e).__name__:
                    print("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ 30 —Å–µ–∫—É–Ω–¥, proxy " + proxy_config)
                    final_resp = "–û–®–ò–ë–ö–ê"
                    got_resp = True
                elif "0x98" in str(e):
                    print("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ë–ª –∫ –æ—à–∏–±–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    final_resp = "–û–®–ò–ë–ö–ê"
                    got_resp = True
                else:
                    print(str(e))
                    print(type(e).__name__)
                    print(url)
                    final_resp = "–û–®–ò–ë–ö–ê"
                    got_resp = True
                await asyncio.sleep(5)

    return final_resp


# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π
async def get_acts(task_number, results, input_filename):
    global PROXIES_LIST

    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞–∑–≤–æ–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    await asyncio.sleep(random.uniform(1, 10))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    async with aiohttp.ClientSession(
        headers=HEADERS, timeout=aiohttp.ClientTimeout(total=30)) as session:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É
        for result in results:
            # print(result["–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–µ–ª–∞"])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ–∫—Ä–∞—â–∞–ª–∫–æ–π
            response = await send_request(result["link"] + "&nc=1",
                                          task_number, session)
            soup = BeautifulSoup(response, "html.parser")

            # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            if all(error not in response for error in [
                    "–ù–ï–í–ï–†–ù–´–ô –§–û–†–ú–ê–¢ –ó–ê–ü–†–û–°–ê!",
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "–û–®–ò–ë–ö–ê"
            ]) and soup.select_one("div.title, div.name-instanse"):

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
                formatted_case = {
                    "region": result["region"],
                    "court_name": result["court_name"],
                    "case_number": result["case_number"],
                    "date_reg": result["date_reg"],
                    "court_code": result["ID"][:8],
                    "id_final": result["ID"]
                }

                # –í—ã–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–ª–∞ –∏ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—é
                title = soup.select_one("div.title, div.name-instanse"
                                        ).get_text(strip=True).split(" - ")
                match title[0]:
                    case "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –¥–µ–ª–∞" | "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞":
                        formatted_case["case_type"] = "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –¥–µ–ª–æ"
                    case "–£–≥–æ–ª–æ–≤–Ω—ã–µ –¥–µ–ª–∞":
                        formatted_case["case_type"] = "–£–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ"
                    case "–î–µ–ª–∞ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö":
                        formatted_case[
                            "case_type"] = "–î–µ–ª–æ –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–∏"
                    case "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞ (–ö–êC –†–§)":
                        formatted_case["case_type"] = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–æ"
                    case "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º":
                        formatted_case["case_type"] = title[0]
                    case _:
                        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–ª–∞:", title[0])
                if len(title) == 1:
                    title.append("–ø–µ—Ä–≤–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è")
                else:
                    match title[1]:
                        case "–ø–µ—Ä–≤–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è":
                            formatted_case["instance"] = "–ü–µ—Ä–≤–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è"
                        case "–∞–ø–µ–ª–ª—è—Ü–∏—è" | "–∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" | "–ø–µ—Ä–≤—ã–π –ø–µ—Ä–µ—Å–º–æ—Ç—Ä":
                            formatted_case["instance"] = "–ê–ø–µ–ª–ª—è—Ü–∏—è"
                        case "–∫–∞—Å—Å–∞—Ü–∏—è":
                            formatted_case["instance"] = "–ö–∞—Å—Å–∞—Ü–∏—è"
                        case _:
                            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏—è:", title[1])

                # –ó–∞–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–ª–∞
                delo_table = soup.select_one(
                    "table[id=tablcont]:has(tr > th:-soup-contains-own('–î–ï–õ–û')), "
                    + "[id=tab_content_Case]")
                if delo_table:
                    FIELD_CONVERTER = {
                        "case_category_article":
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–µ–ª–∞', '–í–∏–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                        "case_category_sub_type":
                        "–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è, —Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–∞, –∂–∞–ª–æ–±—ã', '–°—É—â–Ω–æ—Å—Ç—å –∑–∞—è–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                        "date_result": "–î–∞—Ç–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
                        "id_uid": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–ª–∞",
                        "judge": "–°—É–¥—å—è",
                        "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
                        "adm_case_pr_number": "–ù–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –æ–± –ê–ü"
                    }
                    for key in FIELD_CONVERTER:
                        if field := delo_table.select_one(
                                f"td:-soup-contains('{FIELD_CONVERTER[key]}') + td"
                        ):
                            formatted_case[key] = field.get_text(strip=True)
                    if "–≤ —Å–∏–ª—É" in delo_table:
                        print(delo_table.get_text())

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
                    for key in formatted_case:
                        if "date" in key and formatted_case[key]:
                            formatted_case[key] = datetime.strptime(
                                formatted_case[key],
                                "%d.%m.%Y").strftime("%Y-%m-%d")

                    # –ü–æ–¥—Å—É–¥–∏–º—ã–µ
                    if def_table := soup.select_one(
                            "table[id=tablcont]:has(tr > th:-soup-contains-own('–õ–ò–¶–ê')), "
                            + "table[id=tab_content_DefList]"):

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü
                        if ("tablcont" in str(def_table)
                                and ">–õ–ò–¶–ê<" in str(def_table)
                            ) or "tab_content_DefList" in str(def_table):
                            defendants = []
                            for row in def_table.select(
                                    "tr:-soup-contains('–§–∞–º–∏–ª–∏—è') ~ tr"):
                                defendant = []
                                for cell in row.select("td"):
                                    defendant.append(cell.get_text(strip=True))
                                defendants.append(" - ".join(defendant))
                            formatted_case["defendants"] = "\n".join(
                                defendants)

                    # –°—Ç–æ—Ä–æ–Ω—ã –ø–æ –¥–µ–ª—É
                    if part_table := soup.select_one(
                            "table[id=tablcont]:has(tr > th:-soup-contains-own('–°–¢–û–†–û–ù–´', '–£–ß–ê–°–¢–ù–ò–ö–ò')), "
                            + "table[id=tab_content_PersonList]"):
                        participants = []
                        for row in part_table.select(
                                "tr:-soup-contains('–í–∏–¥ –ª–∏—Ü–∞') ~ tr"):
                            participant = []
                            for cell in row.select("td"):
                                participant.append(cell.get_text(strip=True))
                            participants.append(" - ".join(participant))
                        formatted_case["participants"] = "\n".join(
                            participants)

                    # –ù–∏–∂–µ—Å—Ç–æ—è—â–∏–π —Å—É–¥
                    if first_table := soup.select_one(
                            "table[id=tablcont]:has(tr > th:-soup-contains-own('–†–ê–°–°–ú–û–¢–†–ï–ù–ò–ï –í –ù–ò–ñ–ï–°–¢–û–Ø–©–ï–ú –°–£–î–ï')), "
                            + "table[id=tab_content_CourtI]"):
                        first_field_converter = {
                            "first_court_name":
                            "–°—É–¥ (—Å—É–¥–µ–±–Ω—ã–π —É—á–∞—Å—Ç–æ–∫) –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏",
                            "first_case_number":
                            "–ù–æ–º–µ—Ä –¥–µ–ª–∞ –≤ –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏",
                            "first_judge":
                            "–°—É–¥—å—è (–º–∏—Ä–æ–≤–æ–π —Å—É–¥—å—è) –ø–µ—Ä–≤–æ–π –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏"
                        }
                        for key in first_field_converter:
                            if field := first_table.select_one(
                                    f"td:-soup-contains('{first_field_converter[key]}') + td"
                            ):
                                formatted_case[key] = field.get_text(
                                    strip=True)

                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                    if "<HTML>" in response[10:]:
                        formatted_case["document_text"] = BeautifulSoup(
                            response[response.find("<HTML>", 10):response.
                                     find("</HTML>")],
                            "html.parser").get_text()

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ø–æ –∫–æ–¥—É —Å—É–¥–∞
                    open(
                        f"cases_by_court/{sys.argv[2]}/" +
                        formatted_case["court_code"] + ".jsonl", "a").write(
                            json.dumps(formatted_case, ensure_ascii=False).
                            replace(u"\u00A0", " ") + "\n")

            # –í—Å–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            else:
                open(input_filename + "-Cases-Failed.jsonl",
                     "a").write(json.dumps(result, ensure_ascii=False) + "\n")

            # –û—Ç—á–∏—Ç—ã–≤–∞–µ–º—Å—è –∫–∞–∂–¥—ã–µ 100 —Ä–µ—à–µ–Ω–∏–π
            if results.index(result) % 100 == 0:
                print(f"ü§ñ {task_number:>3d}",
                      "{:>4.0%}".format(
                          (results.index(result) + 1) / len(results)),
                      sep=" | ")

    print(f"ü§ñ {task_number:>3d}", "üü¢ –ó–ê–ö–û–ù–ß–ò–õ", sep=" | ")


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏–π
async def acts_runner(input_filename, tasks, last_part):
    print("C–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", input_filename)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    case_list = []
    case_count = 1
    part_count = 1
    gather_start = datetime.now()
    with open(input_filename + ".jsonl") as input_file:
        for line in input_file:
            case_list.append(json.loads(line))

            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ –º–∏–ª–ª–∏–æ–Ω—É –∫–∞—Ä—Ç–æ—á–µ–∫
            if case_count <= 1000000:
                case_count += 1
            else:

                if part_count > last_part:
                    print("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è", part_count)
                    print("–°–∫–∞—á–∏–≤–∞–µ–º")

                    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                    coro_list = []
                    batch_size = round(len(case_list) / tasks)
                    for i in range(tasks):
                        if i < tasks - 1:
                            case_batch = case_list[i *
                                                   batch_size:i * batch_size +
                                                   batch_size]
                        else:
                            case_batch = case_list[i * batch_size:]
                        coro_list.append(
                            get_acts(i + 1, case_batch, input_filename))

                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                del case_list
                gc.collect()

                if part_count > last_part:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                    await asyncio.gather(*coro_list)

                    print(
                        "–ö—É—Å–æ–∫", part_count, "—Å–∫–∞—á–∞–Ω, –ø—Ä–æ—à–ª–æ",
                        int((datetime.now() - gather_start).total_seconds() /
                            3600), "—á–∞—Å(–æ–≤)")

                # –û–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                case_list = []
                case_count = 0
                part_count += 1

    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—á–∫–∞
    if case_count > 0:
        print("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞—Ä—Ç–∏—è")
        print("–°–∫–∞—á–∏–≤–∞–µ–º")

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—á–µ–Ω—å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        coro_list = []
        batch_size = round(len(case_list) / tasks)
        for i in range(tasks):
            if i < tasks - 1:
                case_batch = case_list[i * batch_size:i * batch_size +
                                       batch_size]
            else:
                case_batch = case_list[i * batch_size:]
            coro_list.append(get_acts(i + 1, case_batch, input_filename))

        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        del case_list
        gc.collect()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        await asyncio.gather(*coro_list)

        print("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫", part_count, "—Å–∫–∞—á–∞–Ω, –ø—Ä–æ—à–ª–æ",
              int((datetime.now() - gather_start).total_seconds() / 3600),
              "—á–∞—Å(–æ–≤)")


# –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
PROXIES_LIST = open("proxy.txt").read().splitlines()

# –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞
# –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏ (0)
asyncio.run(acts_runner(sys.argv[1], 100, 0))
